from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from bot_database import Database
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN")
    print("üìù –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway")
    exit(1)

DEPARTMENTS = ["IT", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–¥–∞–∂–∏", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "HR", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–î—Ä—É–≥–æ–µ"]
db = Database()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name)
    
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏!

**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–æ—Ç–∞:**
‚Ä¢ –°–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã  
‚Ä¢ –í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª: üëá
    """
    
    keyboard = []
    for dept in DEPARTMENTS:
        keyboard.append([InlineKeyboardButton(dept, callback_data=f"dept_{dept}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data.startswith("dept_"):
        department = data.split("_")[1]
        db.update_department(user_id, department)
        
        is_admin = (department.upper() == "IT")
        confirmation_text = f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–¥–µ–ª: **{department}**"
        
        if is_admin:
            confirmation_text += "\n\nüéõ **–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!** –î–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            keyboard = [
                [InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="create_post")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
                [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª", callback_data="change_department")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª", callback_data="change_department")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(confirmation_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif data == "change_department":
        keyboard = []
        for dept in DEPARTMENTS:
            keyboard.append([InlineKeyboardButton(dept, callback_data=f"dept_{dept}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:", reply_markup=reply_markup)
    
    elif data == "create_post":
        await start_post_creation(query, context)
    
    elif data == "show_stats":
        await show_statistics(query)
    
    elif data == "back_to_main":
        await return_to_main_menu(query)

async def start_post_creation(query, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_id = query.from_user.id
    user_data = db.get_user(user_id)
    
    if not user_data or not user_data[4]:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    
    keyboard = []
    for i in range(0, len(DEPARTMENTS), 2):
        row = []
        for j in range(2):
            if i + j < len(DEPARTMENTS):
                dept = DEPARTMENTS[i + j]
                row.append(InlineKeyboardButton(dept, callback_data=f"target_{dept}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üéØ –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", callback_data="target_ALL")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üì¢ **–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:", reply_markup=reply_markup, parse_mode='Markdown')

async def handle_target_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("target_"):
        target = query.data.replace("target_", "")
        context.user_data['post_target'] = target
        context.user_data['waiting_for_message'] = True
        
        target_text = "–≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º" if target == "ALL" else f"–æ—Ç–¥–µ–ª—É {target}"
        await query.edit_message_text(f"üéØ **–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:** {target_text}\n\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", parse_mode='Markdown')

async def handle_message_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if context.user_data.get('waiting_for_message'):
        message_text = update.message.text
        target = context.user_data.get('post_target')
        user_id = update.effective_user.id
        
        user_data = db.get_user(user_id)
        if not user_data or not user_data[4]:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            context.user_data.clear()
            return
        
        if target == "ALL":
            user_ids = db.get_all_users()
            target_text = "–≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"
        else:
            user_ids = db.get_users_by_department(target)
            target_text = f"–æ—Ç–¥–µ–ª—É {target}"
        
        sent_count = 0
        for uid in user_ids:
            try:
                await context.bot.send_message(
                    chat_id=uid,
                    text=f"üì¢ **–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n{message_text}\n\n_–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {target_text}_",
                    parse_mode='Markdown'
                )
                sent_count += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
        
        db.save_post(user_id, target, message_text)
        context.user_data.clear()
        
        result_text = f"‚úÖ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n‚Ä¢ üì§ –£—Å–ø–µ—à–Ω–æ: {sent_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n‚Ä¢ üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {target_text}"
        keyboard = [
            [InlineKeyboardButton("üì¢ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="create_post")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(result_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_statistics(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    user_id = query.from_user.id
    user_data = db.get_user(user_id)
    
    if not user_data or not user_data[4]:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    
    total_users = len(db.get_all_users())
    departments_stats = {}
    
    for dept in DEPARTMENTS:
        count = len(db.get_users_by_department(dept))
        if count > 0:
            departments_stats[dept] = count
    
    stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n\n"
    
    if departments_stats:
        stats_text += "**–ü–æ –æ—Ç–¥–µ–ª–∞–º:**\n"
        for dept, count in departments_stats.items():
            admin_indicator = " üëë" if dept.upper() == "IT" else ""
            stats_text += f"‚Ä¢ {dept}: {count} —á–µ–ª.{admin_indicator}\n"
    
    keyboard = [
        [InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="create_post")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

async def return_to_main_menu(query):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = query.from_user.id
    user_data = db.get_user(user_id)
    
    if user_data:
        department = user_data[3] or "–ù–µ –≤—ã–±—Ä–∞–Ω"
        is_admin = user_data[4]
        
        text = f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n‚úÖ –í–∞—à –æ—Ç–¥–µ–ª: **{department}**"
        
        if is_admin:
            text += "\n\nüéõ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞"
            keyboard = [
                [InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="create_post")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
                [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª", callback_data="change_department")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª", callback_data="change_department")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(dept_|change_department|create_post|show_stats|back_to_main)$"))
    application.add_handler(CallbackQueryHandler(handle_target_selection, pattern="^target_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message_input))
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É")
    application.run_polling()

if __name__ == '__main__':
    main()